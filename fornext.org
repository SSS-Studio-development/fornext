#+TITLE: Report for next intern
#+AUTHOR: Raj Manvar
#+DATE: [2016-07-15 Fri]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Basic Idea

+ We have worked on making tools for making transformations of webpages. That is
making changes to the existing web page. 
+ We can make changes to an existing webpage by using javascript . 
+ So we have made tools that use javascript and help transforming the web page.


* Should know
  
I think you can get familiar with the following before starting .

+ Git - version control 
+ Python 
+ Idea of flask server.  ( first 3-4 chapters of [[http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world][this]] link should suffice . )
+ javascript 
+ Org mode literate tools
+ ability to handle UPs and DOWNs 

+ Org mode is file mode where code and explanation is written in the same file
and then the code is tangled out to run it . 
+ To tangling and converting the org file to code and documents we use a
makefile, you can check one of the make file [[https://github.com/SSS-Studio-development/web-services/blob/develop/makefile][here]] .

Note: if you are completely unaware of some of the above , I think you
shouldn't aim to learn it completely, get basic understanding of the required
topic, you will catch up as you continue.


* Basic idea of implementation

Implementation of the project can be understood by dividing it into following
parts.

** Selenium 

+ As discussed above we can change the content of a webpage easily using
javascript, however to make changes we require we would require our own
javascript to be on the page (which we dont have initially . ) 
So we use selenium library in python to add our javascript. you can check [[https://github.com/SSS-Studio-development/sssstudio][this]]
link for the code or you can check [[https://github.com/SSS-Studio-development/release2/blob/master/src/selenium/selenium.org][this]] link for the org file which explain the
code well. 
+ This is basically a web app made using flask, it renders a page which takes in
the URL of a page, opens a new web browser but it will add our javascript by
adding <script> tags in the head section . 
+ The source of the javascript has to be mentioned in the selenium which will add
tags like <script src="our source"> </script> so that we can use it to make
transformations of the page
+ You can try and understand the selenium library of python for understanding it.
+ If you have any problem you can contact [[mailto:raghav.mittal@st.niituniversity.in][Raghav]] here.


** Javascript for webservices

+ Selenium will help adding the javascript to our webpage, however we need to
write the javascript code for each of the service (transformation) which will
be injected by selenium. 
+ So we have written javascript for that. We name it annolet .
+ Check the repository [[https://github.com/SSS-Studio-development/annoletjs][here]] which contains the javascript code for the
webservices .
+ We use term webservice to describe a transformation tool . 
+ Check out different branches of [[https://github.com/SSS-Studio-development/annoletjs][this]] link to check for the javascript code of
different webservice.
+ Some part of this is made by [[mailto:raghav.mittal@st.niituniversity.in][Raghav]] and some by [[mailto:raj.manvar@students.iiit.ac.in][Raj]] . You can contact any of us
if you have any question .


** backend server 

+ Now the above javascript cannot do everything on it's own, it requires some
help to do changes, like for doing language translation we cannot do everything
on the frontend webservice (using javascript) .
+ So we have made another flask server which the frontend webservices will make
requests so that it can get more help, like it may request webserver to get
language translation for some text.
+ You can check places where we have used XMLHttpRequest in javascript . It is
making a request to the backend server .
+ This server basically exposes the API for the required use .
+ You can check [[https://github.com/SSS-Studio-development/web-services][this]] repository for the code and the org files for the backend
server . 
+ You can contact [[mailto:raj.manvar@students.iiit.ac.in][Raj]] if you have any doubt .


* joiner

+ Joiner is the next step for the project developed by [[mailto:raghav.mittal@st.niituniversity.in][Raghav]] . The main idea
behind joiner is to help adding web services easily .
+ As you can notice, webservices for the frontend is just javascript with
function calls, so joiner takes details for each webservices like [[https://github.com/SSS-Studio-development/joiner/blob/master/src/manifest.json][here]] .
+ This asks for details like the link for the code, name of button etc . So now
when a new webpage gets loaded, only joiner will be injected into it using
selenium, this joiner will now add different services as mentioned in the
manifest file.
+ You can contact [[mailto:raghav.mittal@st.niituniversity.in][Raghav]] if you have any doubt. 


